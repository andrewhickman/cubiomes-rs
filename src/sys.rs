/* automatically generated by rust-bindgen 0.59.2 */

pub const __STDC_FORMAT_MACROS: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const PRId8: &[u8; 4usize] = b"hhd\0";
pub const PRId16: &[u8; 3usize] = b"hd\0";
pub const PRId32: &[u8; 2usize] = b"d\0";
pub const PRId64: &[u8; 4usize] = b"lld\0";
pub const PRIdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const PRIdLEAST16: &[u8; 3usize] = b"hd\0";
pub const PRIdLEAST32: &[u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &[u8; 4usize] = b"lld\0";
pub const PRIdFAST8: &[u8; 4usize] = b"hhd\0";
pub const PRIdFAST16: &[u8; 2usize] = b"d\0";
pub const PRIdFAST32: &[u8; 2usize] = b"d\0";
pub const PRIdFAST64: &[u8; 4usize] = b"lld\0";
pub const PRIdMAX: &[u8; 4usize] = b"lld\0";
pub const PRIdPTR: &[u8; 4usize] = b"lld\0";
pub const PRIi8: &[u8; 4usize] = b"hhi\0";
pub const PRIi16: &[u8; 3usize] = b"hi\0";
pub const PRIi32: &[u8; 2usize] = b"i\0";
pub const PRIi64: &[u8; 4usize] = b"lli\0";
pub const PRIiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const PRIiLEAST16: &[u8; 3usize] = b"hi\0";
pub const PRIiLEAST32: &[u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &[u8; 4usize] = b"lli\0";
pub const PRIiFAST8: &[u8; 4usize] = b"hhi\0";
pub const PRIiFAST16: &[u8; 2usize] = b"i\0";
pub const PRIiFAST32: &[u8; 2usize] = b"i\0";
pub const PRIiFAST64: &[u8; 4usize] = b"lli\0";
pub const PRIiMAX: &[u8; 4usize] = b"lli\0";
pub const PRIiPTR: &[u8; 4usize] = b"lli\0";
pub const PRIo8: &[u8; 4usize] = b"hho\0";
pub const PRIo16: &[u8; 3usize] = b"ho\0";
pub const PRIo32: &[u8; 2usize] = b"o\0";
pub const PRIo64: &[u8; 4usize] = b"llo\0";
pub const PRIoLEAST8: &[u8; 4usize] = b"hho\0";
pub const PRIoLEAST16: &[u8; 3usize] = b"ho\0";
pub const PRIoLEAST32: &[u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &[u8; 4usize] = b"llo\0";
pub const PRIoFAST8: &[u8; 4usize] = b"hho\0";
pub const PRIoFAST16: &[u8; 2usize] = b"o\0";
pub const PRIoFAST32: &[u8; 2usize] = b"o\0";
pub const PRIoFAST64: &[u8; 4usize] = b"llo\0";
pub const PRIoMAX: &[u8; 4usize] = b"llo\0";
pub const PRIoPTR: &[u8; 4usize] = b"llo\0";
pub const PRIu8: &[u8; 4usize] = b"hhu\0";
pub const PRIu16: &[u8; 3usize] = b"hu\0";
pub const PRIu32: &[u8; 2usize] = b"u\0";
pub const PRIu64: &[u8; 4usize] = b"llu\0";
pub const PRIuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const PRIuLEAST16: &[u8; 3usize] = b"hu\0";
pub const PRIuLEAST32: &[u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &[u8; 4usize] = b"llu\0";
pub const PRIuFAST8: &[u8; 4usize] = b"hhu\0";
pub const PRIuFAST16: &[u8; 2usize] = b"u\0";
pub const PRIuFAST32: &[u8; 2usize] = b"u\0";
pub const PRIuFAST64: &[u8; 4usize] = b"llu\0";
pub const PRIuMAX: &[u8; 4usize] = b"llu\0";
pub const PRIuPTR: &[u8; 4usize] = b"llu\0";
pub const PRIx8: &[u8; 4usize] = b"hhx\0";
pub const PRIx16: &[u8; 3usize] = b"hx\0";
pub const PRIx32: &[u8; 2usize] = b"x\0";
pub const PRIx64: &[u8; 4usize] = b"llx\0";
pub const PRIxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const PRIxLEAST16: &[u8; 3usize] = b"hx\0";
pub const PRIxLEAST32: &[u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &[u8; 4usize] = b"llx\0";
pub const PRIxFAST8: &[u8; 4usize] = b"hhx\0";
pub const PRIxFAST16: &[u8; 2usize] = b"x\0";
pub const PRIxFAST32: &[u8; 2usize] = b"x\0";
pub const PRIxFAST64: &[u8; 4usize] = b"llx\0";
pub const PRIxMAX: &[u8; 4usize] = b"llx\0";
pub const PRIxPTR: &[u8; 4usize] = b"llx\0";
pub const PRIX8: &[u8; 4usize] = b"hhX\0";
pub const PRIX16: &[u8; 3usize] = b"hX\0";
pub const PRIX32: &[u8; 2usize] = b"X\0";
pub const PRIX64: &[u8; 4usize] = b"llX\0";
pub const PRIXLEAST8: &[u8; 4usize] = b"hhX\0";
pub const PRIXLEAST16: &[u8; 3usize] = b"hX\0";
pub const PRIXLEAST32: &[u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &[u8; 4usize] = b"llX\0";
pub const PRIXFAST8: &[u8; 4usize] = b"hhX\0";
pub const PRIXFAST16: &[u8; 2usize] = b"X\0";
pub const PRIXFAST32: &[u8; 2usize] = b"X\0";
pub const PRIXFAST64: &[u8; 4usize] = b"llX\0";
pub const PRIXMAX: &[u8; 4usize] = b"llX\0";
pub const PRIXPTR: &[u8; 4usize] = b"llX\0";
pub const SCNd8: &[u8; 4usize] = b"hhd\0";
pub const SCNd16: &[u8; 3usize] = b"hd\0";
pub const SCNd32: &[u8; 2usize] = b"d\0";
pub const SCNd64: &[u8; 4usize] = b"lld\0";
pub const SCNdLEAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &[u8; 4usize] = b"lld\0";
pub const SCNdFAST8: &[u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &[u8; 2usize] = b"d\0";
pub const SCNdFAST32: &[u8; 2usize] = b"d\0";
pub const SCNdFAST64: &[u8; 4usize] = b"lld\0";
pub const SCNdMAX: &[u8; 4usize] = b"lld\0";
pub const SCNdPTR: &[u8; 4usize] = b"lld\0";
pub const SCNi8: &[u8; 4usize] = b"hhi\0";
pub const SCNi16: &[u8; 3usize] = b"hi\0";
pub const SCNi32: &[u8; 2usize] = b"i\0";
pub const SCNi64: &[u8; 4usize] = b"lli\0";
pub const SCNiLEAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &[u8; 4usize] = b"lli\0";
pub const SCNiFAST8: &[u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &[u8; 2usize] = b"i\0";
pub const SCNiFAST32: &[u8; 2usize] = b"i\0";
pub const SCNiFAST64: &[u8; 4usize] = b"lli\0";
pub const SCNiMAX: &[u8; 4usize] = b"lli\0";
pub const SCNiPTR: &[u8; 4usize] = b"lli\0";
pub const SCNo8: &[u8; 4usize] = b"hho\0";
pub const SCNo16: &[u8; 3usize] = b"ho\0";
pub const SCNo32: &[u8; 2usize] = b"o\0";
pub const SCNo64: &[u8; 4usize] = b"llo\0";
pub const SCNoLEAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &[u8; 4usize] = b"llo\0";
pub const SCNoFAST8: &[u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &[u8; 2usize] = b"o\0";
pub const SCNoFAST32: &[u8; 2usize] = b"o\0";
pub const SCNoFAST64: &[u8; 4usize] = b"llo\0";
pub const SCNoMAX: &[u8; 4usize] = b"llo\0";
pub const SCNoPTR: &[u8; 4usize] = b"llo\0";
pub const SCNu8: &[u8; 4usize] = b"hhu\0";
pub const SCNu16: &[u8; 3usize] = b"hu\0";
pub const SCNu32: &[u8; 2usize] = b"u\0";
pub const SCNu64: &[u8; 4usize] = b"llu\0";
pub const SCNuLEAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &[u8; 4usize] = b"llu\0";
pub const SCNuFAST8: &[u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &[u8; 2usize] = b"u\0";
pub const SCNuFAST32: &[u8; 2usize] = b"u\0";
pub const SCNuFAST64: &[u8; 4usize] = b"llu\0";
pub const SCNuMAX: &[u8; 4usize] = b"llu\0";
pub const SCNuPTR: &[u8; 4usize] = b"llu\0";
pub const SCNx8: &[u8; 4usize] = b"hhx\0";
pub const SCNx16: &[u8; 3usize] = b"hx\0";
pub const SCNx32: &[u8; 2usize] = b"x\0";
pub const SCNx64: &[u8; 4usize] = b"llx\0";
pub const SCNxLEAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &[u8; 4usize] = b"llx\0";
pub const SCNxFAST8: &[u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &[u8; 2usize] = b"x\0";
pub const SCNxFAST32: &[u8; 2usize] = b"x\0";
pub const SCNxFAST64: &[u8; 4usize] = b"llx\0";
pub const SCNxMAX: &[u8; 4usize] = b"llx\0";
pub const SCNxPTR: &[u8; 4usize] = b"llx\0";
pub const LAYER_INIT_SHA: i32 = -1;
pub const LARGE_BIOMES: u32 = 1;
pub const FORCE_OCEAN_VARIANTS: u32 = 4;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type size_t = ::std::os::raw::c_ulonglong;
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_data_public>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_data_public>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_data_public))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_pctype as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_pctype)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_mb_cur_max as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_mb_cur_max)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__crt_locale_data_public>()))._locale_lc_codepage as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_data_public),
            "::",
            stringify!(_locale_lc_codepage)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(
        ::std::mem::size_of::<__crt_locale_pointers>(),
        16usize,
        concat!("Size of: ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        ::std::mem::align_of::<__crt_locale_pointers>(),
        8usize,
        concat!("Alignment of ", stringify!(__crt_locale_pointers))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).locinfo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(locinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__crt_locale_pointers>())).mbcinfo as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__crt_locale_pointers),
            "::",
            stringify!(mbcinfo)
        )
    );
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(
        ::std::mem::size_of::<_Mbstatet>(),
        8usize,
        concat!("Size of: ", stringify!(_Mbstatet))
    );
    assert_eq!(
        ::std::mem::align_of::<_Mbstatet>(),
        4usize,
        concat!("Alignment of ", stringify!(_Mbstatet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Wchar as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Wchar)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._Byte as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_Byte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Mbstatet>()))._State as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(_Mbstatet),
            "::",
            stringify!(_State)
        )
    );
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
extern "C" {
    pub fn _calloc_base(_Count: size_t, _Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> size_t;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: size_t, _Alignment: size_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
        _Offset: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: size_t,
        _Size: size_t,
        _Alignment: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: size_t,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: size_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: size_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: size_t,
        _Dir: *mut wchar_t,
        _DirCount: size_t,
        _Filename: *mut wchar_t,
        _FilenameCount: size_t,
        _Ext: *mut wchar_t,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(
        ::std::mem::size_of::<_div_t>(),
        8usize,
        concat!("Size of: ", stringify!(_div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_div_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_ldiv_t>(),
        8usize,
        concat!("Size of: ", stringify!(_ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_ldiv_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ldiv_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LDOUBLE>(),
        10usize,
        concat!("Size of: ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDOUBLE>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDOUBLE>())).ld as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDOUBLE),
            "::",
            stringify!(ld)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_DOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_CRT_DOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_DOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_DOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(
        ::std::mem::size_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Size of: ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        ::std::mem::align_of::<_CRT_FLOAT>(),
        4usize,
        concat!("Alignment of ", stringify!(_CRT_FLOAT))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_CRT_FLOAT>())).f as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_CRT_FLOAT),
            "::",
            stringify!(f)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(
        ::std::mem::size_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Size of: ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        ::std::mem::align_of::<_LONGDOUBLE>(),
        8usize,
        concat!("Alignment of ", stringify!(_LONGDOUBLE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LONGDOUBLE>())).x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LONGDOUBLE),
            "::",
            stringify!(x)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(
        ::std::mem::size_of::<_LDBL12>(),
        12usize,
        concat!("Size of: ", stringify!(_LDBL12))
    );
    assert_eq!(
        ::std::mem::align_of::<_LDBL12>(),
        1usize,
        concat!("Alignment of ", stringify!(_LDBL12))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_LDBL12>())).ld12 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_LDBL12),
            "::",
            stringify!(ld12)
        )
    );
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: size_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> size_t;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: size_t) -> size_t;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: size_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _DstBuf: *mut wchar_t,
        _SizeInWords: size_t,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: size_t,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
    ) -> size_t;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut size_t,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: size_t,
        _Src: *const wchar_t,
        _MaxCountInBytes: size_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: size_t,
        _Locale: _locale_t,
    ) -> size_t;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: size_t,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: size_t,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: size_t,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut size_t,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut size_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: size_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Lldiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout__Lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<_Lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(_Lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_Lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_Lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_Lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_Lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_Lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
pub type imaxdiv_t = _Lldiv_t;
extern "C" {
    pub fn imaxabs(_Number: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(_Numerator: intmax_t, _Denominator: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn _strtoimax_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _strtoumax_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn _wcstoimax_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn _wcstoumax_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> uintmax_t;
}
#[doc = "============================================================================="]
#[doc = "                               Xoroshiro 128"]
#[doc = "============================================================================="]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Xoroshiro {
    pub lo: u64,
    pub hi: u64,
}
#[test]
fn bindgen_test_layout_Xoroshiro() {
    assert_eq!(
        ::std::mem::size_of::<Xoroshiro>(),
        16usize,
        concat!("Size of: ", stringify!(Xoroshiro))
    );
    assert_eq!(
        ::std::mem::align_of::<Xoroshiro>(),
        8usize,
        concat!("Alignment of ", stringify!(Xoroshiro))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Xoroshiro>())).lo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Xoroshiro),
            "::",
            stringify!(lo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Xoroshiro>())).hi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Xoroshiro),
            "::",
            stringify!(hi)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PerlinNoise {
    pub d: [u8; 512usize],
    pub a: f64,
    pub b: f64,
    pub c: f64,
    pub amplitude: f64,
    pub lacunarity: f64,
}
#[test]
fn bindgen_test_layout_PerlinNoise() {
    assert_eq!(
        ::std::mem::size_of::<PerlinNoise>(),
        552usize,
        concat!("Size of: ", stringify!(PerlinNoise))
    );
    assert_eq!(
        ::std::mem::align_of::<PerlinNoise>(),
        8usize,
        concat!("Alignment of ", stringify!(PerlinNoise))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PerlinNoise>())).d as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PerlinNoise),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PerlinNoise>())).a as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(PerlinNoise),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PerlinNoise>())).b as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(PerlinNoise),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PerlinNoise>())).c as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(PerlinNoise),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PerlinNoise>())).amplitude as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(PerlinNoise),
            "::",
            stringify!(amplitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PerlinNoise>())).lacunarity as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(PerlinNoise),
            "::",
            stringify!(lacunarity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OctaveNoise {
    pub octcnt: ::std::os::raw::c_int,
    pub octaves: *mut PerlinNoise,
}
#[test]
fn bindgen_test_layout_OctaveNoise() {
    assert_eq!(
        ::std::mem::size_of::<OctaveNoise>(),
        16usize,
        concat!("Size of: ", stringify!(OctaveNoise))
    );
    assert_eq!(
        ::std::mem::align_of::<OctaveNoise>(),
        8usize,
        concat!("Alignment of ", stringify!(OctaveNoise))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OctaveNoise>())).octcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OctaveNoise),
            "::",
            stringify!(octcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OctaveNoise>())).octaves as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OctaveNoise),
            "::",
            stringify!(octaves)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DoublePerlinNoise {
    pub amplitude: f64,
    pub octA: OctaveNoise,
    pub octB: OctaveNoise,
}
#[test]
fn bindgen_test_layout_DoublePerlinNoise() {
    assert_eq!(
        ::std::mem::size_of::<DoublePerlinNoise>(),
        40usize,
        concat!("Size of: ", stringify!(DoublePerlinNoise))
    );
    assert_eq!(
        ::std::mem::align_of::<DoublePerlinNoise>(),
        8usize,
        concat!("Alignment of ", stringify!(DoublePerlinNoise))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DoublePerlinNoise>())).amplitude as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DoublePerlinNoise),
            "::",
            stringify!(amplitude)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DoublePerlinNoise>())).octA as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DoublePerlinNoise),
            "::",
            stringify!(octA)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<DoublePerlinNoise>())).octB as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(DoublePerlinNoise),
            "::",
            stringify!(octB)
        )
    );
}
extern "C" {
    #[doc = " Helper"]
    pub fn maintainPrecision(x: f64) -> f64;
}
extern "C" {
    #[doc = " Perlin noise"]
    pub fn perlinInit(noise: *mut PerlinNoise, seed: *mut u64);
}
extern "C" {
    pub fn xPerlinInit(noise: *mut PerlinNoise, xr: *mut Xoroshiro);
}
extern "C" {
    pub fn samplePerlin(
        noise: *const PerlinNoise,
        x: f64,
        y: f64,
        z: f64,
        yamp: f64,
        ymin: f64,
    ) -> f64;
}
extern "C" {
    pub fn sampleSimplex2D(noise: *const PerlinNoise, x: f64, y: f64) -> f64;
}
extern "C" {
    #[doc = " Perlin Octaves"]
    pub fn octaveInit(
        noise: *mut OctaveNoise,
        seed: *mut u64,
        octaves: *mut PerlinNoise,
        omin: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xOctaveInit(
        noise: *mut OctaveNoise,
        xr: *mut Xoroshiro,
        octaves: *mut PerlinNoise,
        amplitudes: *const f64,
        omin: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sampleOctave(noise: *const OctaveNoise, x: f64, y: f64, z: f64) -> f64;
}
extern "C" {
    #[doc = " Double Perlin"]
    pub fn doublePerlinInit(
        noise: *mut DoublePerlinNoise,
        seed: *mut u64,
        octavesA: *mut PerlinNoise,
        octavesB: *mut PerlinNoise,
        omin: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn xDoublePerlinInit(
        noise: *mut DoublePerlinNoise,
        xr: *mut Xoroshiro,
        octaves: *mut PerlinNoise,
        amplitudes: *const f64,
        omin: ::std::os::raw::c_int,
        len: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sampleDoublePerlin(noise: *const DoublePerlinNoise, x: f64, y: f64, z: f64) -> f64;
}
pub const MCversion_MC_1_0: MCversion = 0;
pub const MCversion_MC_1_1: MCversion = 1;
pub const MCversion_MC_1_2: MCversion = 2;
pub const MCversion_MC_1_3: MCversion = 3;
pub const MCversion_MC_1_4: MCversion = 4;
pub const MCversion_MC_1_5: MCversion = 5;
pub const MCversion_MC_1_6: MCversion = 6;
pub const MCversion_MC_1_7: MCversion = 7;
pub const MCversion_MC_1_8: MCversion = 8;
pub const MCversion_MC_1_9: MCversion = 9;
pub const MCversion_MC_1_10: MCversion = 10;
pub const MCversion_MC_1_11: MCversion = 11;
pub const MCversion_MC_1_12: MCversion = 12;
pub const MCversion_MC_1_13: MCversion = 13;
pub const MCversion_MC_1_14: MCversion = 14;
pub const MCversion_MC_1_15: MCversion = 15;
pub const MCversion_MC_1_16: MCversion = 16;
pub const MCversion_MC_1_17: MCversion = 17;
pub const MCversion_MC_1_18: MCversion = 18;
pub const MCversion_MC_NEWEST: MCversion = 18;
pub type MCversion = ::std::os::raw::c_int;
pub const BiomeID_none: BiomeID = -1;
pub const BiomeID_ocean: BiomeID = 0;
pub const BiomeID_plains: BiomeID = 1;
pub const BiomeID_desert: BiomeID = 2;
pub const BiomeID_mountains: BiomeID = 3;
pub const BiomeID_extremeHills: BiomeID = 3;
pub const BiomeID_forest: BiomeID = 4;
pub const BiomeID_taiga: BiomeID = 5;
pub const BiomeID_swamp: BiomeID = 6;
pub const BiomeID_swampland: BiomeID = 6;
pub const BiomeID_river: BiomeID = 7;
pub const BiomeID_nether_wastes: BiomeID = 8;
pub const BiomeID_hell: BiomeID = 8;
pub const BiomeID_the_end: BiomeID = 9;
pub const BiomeID_sky: BiomeID = 9;
pub const BiomeID_frozen_ocean: BiomeID = 10;
pub const BiomeID_frozenOcean: BiomeID = 10;
pub const BiomeID_frozen_river: BiomeID = 11;
pub const BiomeID_frozenRiver: BiomeID = 11;
pub const BiomeID_snowy_tundra: BiomeID = 12;
pub const BiomeID_icePlains: BiomeID = 12;
pub const BiomeID_snowy_mountains: BiomeID = 13;
pub const BiomeID_iceMountains: BiomeID = 13;
pub const BiomeID_mushroom_fields: BiomeID = 14;
pub const BiomeID_mushroomIsland: BiomeID = 14;
pub const BiomeID_mushroom_field_shore: BiomeID = 15;
pub const BiomeID_mushroomIslandShore: BiomeID = 15;
pub const BiomeID_beach: BiomeID = 16;
pub const BiomeID_desert_hills: BiomeID = 17;
pub const BiomeID_desertHills: BiomeID = 17;
pub const BiomeID_wooded_hills: BiomeID = 18;
pub const BiomeID_forestHills: BiomeID = 18;
pub const BiomeID_taiga_hills: BiomeID = 19;
pub const BiomeID_taigaHills: BiomeID = 19;
pub const BiomeID_mountain_edge: BiomeID = 20;
pub const BiomeID_extremeHillsEdge: BiomeID = 20;
pub const BiomeID_jungle: BiomeID = 21;
pub const BiomeID_jungle_hills: BiomeID = 22;
pub const BiomeID_jungleHills: BiomeID = 22;
pub const BiomeID_jungle_edge: BiomeID = 23;
pub const BiomeID_jungleEdge: BiomeID = 23;
pub const BiomeID_deep_ocean: BiomeID = 24;
pub const BiomeID_deepOcean: BiomeID = 24;
pub const BiomeID_stone_shore: BiomeID = 25;
pub const BiomeID_stoneBeach: BiomeID = 25;
pub const BiomeID_snowy_beach: BiomeID = 26;
pub const BiomeID_coldBeach: BiomeID = 26;
pub const BiomeID_birch_forest: BiomeID = 27;
pub const BiomeID_birchForest: BiomeID = 27;
pub const BiomeID_birch_forest_hills: BiomeID = 28;
pub const BiomeID_birchForestHills: BiomeID = 28;
pub const BiomeID_dark_forest: BiomeID = 29;
pub const BiomeID_roofedForest: BiomeID = 29;
pub const BiomeID_snowy_taiga: BiomeID = 30;
pub const BiomeID_coldTaiga: BiomeID = 30;
pub const BiomeID_snowy_taiga_hills: BiomeID = 31;
pub const BiomeID_coldTaigaHills: BiomeID = 31;
pub const BiomeID_giant_tree_taiga: BiomeID = 32;
pub const BiomeID_megaTaiga: BiomeID = 32;
pub const BiomeID_giant_tree_taiga_hills: BiomeID = 33;
pub const BiomeID_megaTaigaHills: BiomeID = 33;
pub const BiomeID_wooded_mountains: BiomeID = 34;
pub const BiomeID_extremeHillsPlus: BiomeID = 34;
pub const BiomeID_savanna: BiomeID = 35;
pub const BiomeID_savanna_plateau: BiomeID = 36;
pub const BiomeID_savannaPlateau: BiomeID = 36;
pub const BiomeID_badlands: BiomeID = 37;
pub const BiomeID_mesa: BiomeID = 37;
pub const BiomeID_wooded_badlands_plateau: BiomeID = 38;
pub const BiomeID_mesaPlateau_F: BiomeID = 38;
pub const BiomeID_badlands_plateau: BiomeID = 39;
pub const BiomeID_mesaPlateau: BiomeID = 39;
pub const BiomeID_small_end_islands: BiomeID = 40;
pub const BiomeID_end_midlands: BiomeID = 41;
pub const BiomeID_end_highlands: BiomeID = 42;
pub const BiomeID_end_barrens: BiomeID = 43;
pub const BiomeID_warm_ocean: BiomeID = 44;
pub const BiomeID_warmOcean: BiomeID = 44;
pub const BiomeID_lukewarm_ocean: BiomeID = 45;
pub const BiomeID_lukewarmOcean: BiomeID = 45;
pub const BiomeID_cold_ocean: BiomeID = 46;
pub const BiomeID_coldOcean: BiomeID = 46;
pub const BiomeID_deep_warm_ocean: BiomeID = 47;
pub const BiomeID_warmDeepOcean: BiomeID = 47;
pub const BiomeID_deep_lukewarm_ocean: BiomeID = 48;
pub const BiomeID_lukewarmDeepOcean: BiomeID = 48;
pub const BiomeID_deep_cold_ocean: BiomeID = 49;
pub const BiomeID_coldDeepOcean: BiomeID = 49;
pub const BiomeID_deep_frozen_ocean: BiomeID = 50;
pub const BiomeID_frozenDeepOcean: BiomeID = 50;
pub const BiomeID_BIOME_NUM: BiomeID = 51;
pub const BiomeID_the_void: BiomeID = 127;
pub const BiomeID_sunflower_plains: BiomeID = 129;
pub const BiomeID_desert_lakes: BiomeID = 130;
pub const BiomeID_gravelly_mountains: BiomeID = 131;
pub const BiomeID_flower_forest: BiomeID = 132;
pub const BiomeID_taiga_mountains: BiomeID = 133;
pub const BiomeID_swamp_hills: BiomeID = 134;
pub const BiomeID_ice_spikes: BiomeID = 140;
pub const BiomeID_modified_jungle: BiomeID = 149;
pub const BiomeID_modified_jungle_edge: BiomeID = 151;
pub const BiomeID_tall_birch_forest: BiomeID = 155;
pub const BiomeID_tall_birch_hills: BiomeID = 156;
pub const BiomeID_dark_forest_hills: BiomeID = 157;
pub const BiomeID_snowy_taiga_mountains: BiomeID = 158;
pub const BiomeID_giant_spruce_taiga: BiomeID = 160;
pub const BiomeID_giant_spruce_taiga_hills: BiomeID = 161;
pub const BiomeID_modified_gravelly_mountains: BiomeID = 162;
pub const BiomeID_shattered_savanna: BiomeID = 163;
pub const BiomeID_shattered_savanna_plateau: BiomeID = 164;
pub const BiomeID_eroded_badlands: BiomeID = 165;
pub const BiomeID_modified_wooded_badlands_plateau: BiomeID = 166;
pub const BiomeID_modified_badlands_plateau: BiomeID = 167;
pub const BiomeID_bamboo_jungle: BiomeID = 168;
pub const BiomeID_bamboo_jungle_hills: BiomeID = 169;
pub const BiomeID_soul_sand_valley: BiomeID = 170;
pub const BiomeID_crimson_forest: BiomeID = 171;
pub const BiomeID_warped_forest: BiomeID = 172;
pub const BiomeID_basalt_deltas: BiomeID = 173;
pub const BiomeID_dripstone_caves: BiomeID = 174;
pub const BiomeID_lush_caves: BiomeID = 175;
pub const BiomeID_meadow: BiomeID = 177;
pub const BiomeID_grove: BiomeID = 178;
pub const BiomeID_snowy_slopes: BiomeID = 179;
pub const BiomeID_jagged_peaks: BiomeID = 180;
pub const BiomeID_frozen_peaks: BiomeID = 181;
pub const BiomeID_stony_peaks: BiomeID = 182;
pub const BiomeID_old_growth_birch_forest: BiomeID = 155;
pub const BiomeID_old_growth_pine_taiga: BiomeID = 32;
pub const BiomeID_old_growth_spruce_taiga: BiomeID = 160;
pub const BiomeID_snowy_plains: BiomeID = 12;
pub const BiomeID_sparse_jungle: BiomeID = 23;
pub const BiomeID_stony_shore: BiomeID = 25;
pub const BiomeID_windswept_hills: BiomeID = 3;
pub const BiomeID_windswept_forest: BiomeID = 34;
pub const BiomeID_windswept_gravelly_hills: BiomeID = 131;
pub const BiomeID_windswept_savanna: BiomeID = 163;
pub const BiomeID_wooded_badlands: BiomeID = 38;
pub type BiomeID = ::std::os::raw::c_int;
pub const BiomeTempCategory_Oceanic: BiomeTempCategory = 0;
pub const BiomeTempCategory_Warm: BiomeTempCategory = 1;
pub const BiomeTempCategory_Lush: BiomeTempCategory = 2;
pub const BiomeTempCategory_Cold: BiomeTempCategory = 3;
pub const BiomeTempCategory_Freezing: BiomeTempCategory = 4;
pub const BiomeTempCategory_Special: BiomeTempCategory = 5;
pub type BiomeTempCategory = ::std::os::raw::c_int;
pub const LayerId_L_CONTINENT_4096: LayerId = 0;
pub const LayerId_L_ISLAND_4096: LayerId = 0;
pub const LayerId_L_ZOOM_2048: LayerId = 1;
pub const LayerId_L_LAND_2048: LayerId = 2;
pub const LayerId_L_ADD_ISLAND_2048: LayerId = 2;
pub const LayerId_L_ZOOM_1024: LayerId = 3;
pub const LayerId_L_LAND_1024_A: LayerId = 4;
pub const LayerId_L_ADD_ISLAND_1024A: LayerId = 4;
pub const LayerId_L_LAND_1024_B: LayerId = 5;
pub const LayerId_L_ADD_ISLAND_1024B: LayerId = 5;
pub const LayerId_L_LAND_1024_C: LayerId = 6;
pub const LayerId_L_ADD_ISLAND_1024C: LayerId = 6;
pub const LayerId_L_ISLAND_1024: LayerId = 7;
pub const LayerId_L_REMOVE_OCEAN_1024: LayerId = 7;
pub const LayerId_L_SNOW_1024: LayerId = 8;
pub const LayerId_L_ADD_SNOW_1024: LayerId = 8;
pub const LayerId_L_LAND_1024_D: LayerId = 9;
pub const LayerId_L_ADD_ISLAND_1024D: LayerId = 9;
pub const LayerId_L_COOL_1024: LayerId = 10;
pub const LayerId_L_COOL_WARM_1024: LayerId = 10;
pub const LayerId_L_HEAT_1024: LayerId = 11;
pub const LayerId_L_HEAT_ICE_1024: LayerId = 11;
pub const LayerId_L_SPECIAL_1024: LayerId = 12;
pub const LayerId_L_ZOOM_512: LayerId = 13;
pub const LayerId_L_LAND_512: LayerId = 14;
pub const LayerId_L_ZOOM_256: LayerId = 15;
pub const LayerId_L_LAND_256: LayerId = 16;
pub const LayerId_L_ADD_ISLAND_256: LayerId = 16;
pub const LayerId_L_MUSHROOM_256: LayerId = 17;
pub const LayerId_L_ADD_MUSHROOM_256: LayerId = 17;
pub const LayerId_L_DEEP_OCEAN_256: LayerId = 18;
pub const LayerId_L_BIOME_256: LayerId = 19;
pub const LayerId_L_BAMBOO_256: LayerId = 20;
pub const LayerId_L14_BAMBOO_256: LayerId = 20;
pub const LayerId_L_ZOOM_128: LayerId = 21;
pub const LayerId_L_ZOOM_64: LayerId = 22;
pub const LayerId_L_BIOME_EDGE_64: LayerId = 23;
pub const LayerId_L_NOISE_256: LayerId = 24;
pub const LayerId_L_RIVER_INIT_256: LayerId = 24;
pub const LayerId_L_ZOOM_128_HILLS: LayerId = 25;
pub const LayerId_L_ZOOM_64_HILLS: LayerId = 26;
pub const LayerId_L_HILLS_64: LayerId = 27;
pub const LayerId_L_SUNFLOWER_64: LayerId = 28;
pub const LayerId_L_RARE_BIOME_64: LayerId = 28;
pub const LayerId_L_ZOOM_32: LayerId = 29;
pub const LayerId_L_LAND_32: LayerId = 30;
pub const LayerId_L_ADD_ISLAND_32: LayerId = 30;
pub const LayerId_L_ZOOM_16: LayerId = 31;
pub const LayerId_L_SHORE_16: LayerId = 32;
pub const LayerId_L_SWAMP_RIVER_16: LayerId = 33;
pub const LayerId_L_ZOOM_8: LayerId = 34;
pub const LayerId_L_ZOOM_4: LayerId = 35;
pub const LayerId_L_SMOOTH_4: LayerId = 36;
pub const LayerId_L_ZOOM_128_RIVER: LayerId = 37;
pub const LayerId_L_ZOOM_64_RIVER: LayerId = 38;
pub const LayerId_L_ZOOM_32_RIVER: LayerId = 39;
pub const LayerId_L_ZOOM_16_RIVER: LayerId = 40;
pub const LayerId_L_ZOOM_8_RIVER: LayerId = 41;
pub const LayerId_L_ZOOM_4_RIVER: LayerId = 42;
pub const LayerId_L_RIVER_4: LayerId = 43;
pub const LayerId_L_SMOOTH_4_RIVER: LayerId = 44;
pub const LayerId_L_RIVER_MIX_4: LayerId = 45;
pub const LayerId_L_OCEAN_TEMP_256: LayerId = 46;
pub const LayerId_L13_OCEAN_TEMP_256: LayerId = 46;
pub const LayerId_L_ZOOM_128_OCEAN: LayerId = 47;
pub const LayerId_L13_ZOOM_128: LayerId = 47;
pub const LayerId_L_ZOOM_64_OCEAN: LayerId = 48;
pub const LayerId_L13_ZOOM_64: LayerId = 48;
pub const LayerId_L_ZOOM_32_OCEAN: LayerId = 49;
pub const LayerId_L13_ZOOM_32: LayerId = 49;
pub const LayerId_L_ZOOM_16_OCEAN: LayerId = 50;
pub const LayerId_L13_ZOOM_16: LayerId = 50;
pub const LayerId_L_ZOOM_8_OCEAN: LayerId = 51;
pub const LayerId_L13_ZOOM_8: LayerId = 51;
pub const LayerId_L_ZOOM_4_OCEAN: LayerId = 52;
pub const LayerId_L13_ZOOM_4: LayerId = 52;
pub const LayerId_L_OCEAN_MIX_4: LayerId = 53;
pub const LayerId_L13_OCEAN_MIX_4: LayerId = 53;
pub const LayerId_L_VORONOI_1: LayerId = 54;
pub const LayerId_L_VORONOI_ZOOM_1: LayerId = 54;
pub const LayerId_L_ZOOM_LARGE_A: LayerId = 55;
pub const LayerId_L_ZOOM_LARGE_B: LayerId = 56;
pub const LayerId_L_ZOOM_L_RIVER_A: LayerId = 57;
pub const LayerId_L_ZOOM_L_RIVER_B: LayerId = 58;
pub const LayerId_L_NUM: LayerId = 59;
pub type LayerId = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Range {
    pub scale: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub z: ::std::os::raw::c_int,
    pub sx: ::std::os::raw::c_int,
    pub sz: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub sy: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Range() {
    assert_eq!(
        ::std::mem::size_of::<Range>(),
        28usize,
        concat!("Size of: ", stringify!(Range))
    );
    assert_eq!(
        ::std::mem::align_of::<Range>(),
        4usize,
        concat!("Alignment of ", stringify!(Range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Range>())).scale as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Range),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Range>())).x as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(Range), "::", stringify!(x))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Range>())).z as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Range), "::", stringify!(z))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Range>())).sx as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(Range), "::", stringify!(sx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Range>())).sz as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(Range), "::", stringify!(sz))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Range>())).y as *const _ as usize },
        20usize,
        concat!("Offset of field: ", stringify!(Range), "::", stringify!(y))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Range>())).sy as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(Range), "::", stringify!(sy))
    );
}
pub type mapfunc_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Layer {
    pub getMap: mapfunc_t,
    pub mc: i8,
    pub zoom: i8,
    pub edge: i8,
    pub scale: ::std::os::raw::c_int,
    pub layerSalt: u64,
    pub startSalt: u64,
    pub startSeed: u64,
    pub noise: *mut ::std::os::raw::c_void,
    pub data: *mut ::std::os::raw::c_void,
    pub p: *mut Layer,
    pub p2: *mut Layer,
}
#[test]
fn bindgen_test_layout_Layer() {
    assert_eq!(
        ::std::mem::size_of::<Layer>(),
        72usize,
        concat!("Size of: ", stringify!(Layer))
    );
    assert_eq!(
        ::std::mem::align_of::<Layer>(),
        8usize,
        concat!("Alignment of ", stringify!(Layer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Layer>())).getMap as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Layer),
            "::",
            stringify!(getMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Layer>())).mc as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(Layer), "::", stringify!(mc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Layer>())).zoom as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(Layer),
            "::",
            stringify!(zoom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Layer>())).edge as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(Layer),
            "::",
            stringify!(edge)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Layer>())).scale as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Layer),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Layer>())).layerSalt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Layer),
            "::",
            stringify!(layerSalt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Layer>())).startSalt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Layer),
            "::",
            stringify!(startSalt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Layer>())).startSeed as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Layer),
            "::",
            stringify!(startSeed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Layer>())).noise as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Layer),
            "::",
            stringify!(noise)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Layer>())).data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Layer),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Layer>())).p as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(Layer), "::", stringify!(p))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Layer>())).p2 as *const _ as usize },
        64usize,
        concat!("Offset of field: ", stringify!(Layer), "::", stringify!(p2))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LayerStack {
    pub layers: [Layer; 59usize],
    pub entry_1: *mut Layer,
    pub entry_4: *mut Layer,
    pub entry_16: *mut Layer,
    pub entry_64: *mut Layer,
    pub entry_256: *mut Layer,
    pub oceanRnd: PerlinNoise,
}
#[test]
fn bindgen_test_layout_LayerStack() {
    assert_eq!(
        ::std::mem::size_of::<LayerStack>(),
        4840usize,
        concat!("Size of: ", stringify!(LayerStack))
    );
    assert_eq!(
        ::std::mem::align_of::<LayerStack>(),
        8usize,
        concat!("Alignment of ", stringify!(LayerStack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LayerStack>())).layers as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LayerStack),
            "::",
            stringify!(layers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LayerStack>())).entry_1 as *const _ as usize },
        4248usize,
        concat!(
            "Offset of field: ",
            stringify!(LayerStack),
            "::",
            stringify!(entry_1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LayerStack>())).entry_4 as *const _ as usize },
        4256usize,
        concat!(
            "Offset of field: ",
            stringify!(LayerStack),
            "::",
            stringify!(entry_4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LayerStack>())).entry_16 as *const _ as usize },
        4264usize,
        concat!(
            "Offset of field: ",
            stringify!(LayerStack),
            "::",
            stringify!(entry_16)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LayerStack>())).entry_64 as *const _ as usize },
        4272usize,
        concat!(
            "Offset of field: ",
            stringify!(LayerStack),
            "::",
            stringify!(entry_64)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LayerStack>())).entry_256 as *const _ as usize },
        4280usize,
        concat!(
            "Offset of field: ",
            stringify!(LayerStack),
            "::",
            stringify!(entry_256)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LayerStack>())).oceanRnd as *const _ as usize },
        4288usize,
        concat!(
            "Offset of field: ",
            stringify!(LayerStack),
            "::",
            stringify!(oceanRnd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NetherNoise {
    pub temperature: DoublePerlinNoise,
    pub humidity: DoublePerlinNoise,
    pub oct: [PerlinNoise; 8usize],
}
#[test]
fn bindgen_test_layout_NetherNoise() {
    assert_eq!(
        ::std::mem::size_of::<NetherNoise>(),
        4496usize,
        concat!("Size of: ", stringify!(NetherNoise))
    );
    assert_eq!(
        ::std::mem::align_of::<NetherNoise>(),
        8usize,
        concat!("Alignment of ", stringify!(NetherNoise))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NetherNoise>())).temperature as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(NetherNoise),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NetherNoise>())).humidity as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(NetherNoise),
            "::",
            stringify!(humidity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<NetherNoise>())).oct as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(NetherNoise),
            "::",
            stringify!(oct)
        )
    );
}
pub type EndNoise = PerlinNoise;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SurfaceNoise {
    pub xzScale: f64,
    pub yScale: f64,
    pub xzFactor: f64,
    pub yFactor: f64,
    pub octmin: OctaveNoise,
    pub octmax: OctaveNoise,
    pub octmain: OctaveNoise,
    pub oct: [PerlinNoise; 40usize],
}
#[test]
fn bindgen_test_layout_SurfaceNoise() {
    assert_eq!(
        ::std::mem::size_of::<SurfaceNoise>(),
        22160usize,
        concat!("Size of: ", stringify!(SurfaceNoise))
    );
    assert_eq!(
        ::std::mem::align_of::<SurfaceNoise>(),
        8usize,
        concat!("Alignment of ", stringify!(SurfaceNoise))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SurfaceNoise>())).xzScale as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SurfaceNoise),
            "::",
            stringify!(xzScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SurfaceNoise>())).yScale as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SurfaceNoise),
            "::",
            stringify!(yScale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SurfaceNoise>())).xzFactor as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SurfaceNoise),
            "::",
            stringify!(xzFactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SurfaceNoise>())).yFactor as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SurfaceNoise),
            "::",
            stringify!(yFactor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SurfaceNoise>())).octmin as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SurfaceNoise),
            "::",
            stringify!(octmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SurfaceNoise>())).octmax as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SurfaceNoise),
            "::",
            stringify!(octmax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SurfaceNoise>())).octmain as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SurfaceNoise),
            "::",
            stringify!(octmain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SurfaceNoise>())).oct as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SurfaceNoise),
            "::",
            stringify!(oct)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Spline {
    pub len: ::std::os::raw::c_int,
    pub typ: ::std::os::raw::c_int,
    pub loc: [f32; 12usize],
    pub der: [f32; 12usize],
    pub val: [*mut Spline; 12usize],
}
#[test]
fn bindgen_test_layout_Spline() {
    assert_eq!(
        ::std::mem::size_of::<Spline>(),
        200usize,
        concat!("Size of: ", stringify!(Spline))
    );
    assert_eq!(
        ::std::mem::align_of::<Spline>(),
        8usize,
        concat!("Alignment of ", stringify!(Spline))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Spline>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Spline),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Spline>())).typ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Spline),
            "::",
            stringify!(typ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Spline>())).loc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Spline),
            "::",
            stringify!(loc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Spline>())).der as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Spline),
            "::",
            stringify!(der)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Spline>())).val as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(Spline),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FixSpline {
    pub len: ::std::os::raw::c_int,
    pub val: f32,
}
#[test]
fn bindgen_test_layout_FixSpline() {
    assert_eq!(
        ::std::mem::size_of::<FixSpline>(),
        8usize,
        concat!("Size of: ", stringify!(FixSpline))
    );
    assert_eq!(
        ::std::mem::align_of::<FixSpline>(),
        4usize,
        concat!("Alignment of ", stringify!(FixSpline))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FixSpline>())).len as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FixSpline),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FixSpline>())).val as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FixSpline),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SplineStack {
    pub stack: [Spline; 42usize],
    pub fstack: [FixSpline; 151usize],
    pub len: ::std::os::raw::c_int,
    pub flen: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SplineStack() {
    assert_eq!(
        ::std::mem::size_of::<SplineStack>(),
        9616usize,
        concat!("Size of: ", stringify!(SplineStack))
    );
    assert_eq!(
        ::std::mem::align_of::<SplineStack>(),
        8usize,
        concat!("Alignment of ", stringify!(SplineStack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SplineStack>())).stack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SplineStack),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SplineStack>())).fstack as *const _ as usize },
        8400usize,
        concat!(
            "Offset of field: ",
            stringify!(SplineStack),
            "::",
            stringify!(fstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SplineStack>())).len as *const _ as usize },
        9608usize,
        concat!(
            "Offset of field: ",
            stringify!(SplineStack),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SplineStack>())).flen as *const _ as usize },
        9612usize,
        concat!(
            "Offset of field: ",
            stringify!(SplineStack),
            "::",
            stringify!(flen)
        )
    );
}
#[doc = " Overworld and Nether biome generator for 1.18"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BiomeNoise {
    pub shift: DoublePerlinNoise,
    pub temperature: DoublePerlinNoise,
    pub humidity: DoublePerlinNoise,
    pub continentalness: DoublePerlinNoise,
    pub erosion: DoublePerlinNoise,
    pub weirdness: DoublePerlinNoise,
    pub oct: [PerlinNoise; 46usize],
    pub sp: *mut Spline,
    pub ss: SplineStack,
    pub previdx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_BiomeNoise() {
    assert_eq!(
        ::std::mem::size_of::<BiomeNoise>(),
        35264usize,
        concat!("Size of: ", stringify!(BiomeNoise))
    );
    assert_eq!(
        ::std::mem::align_of::<BiomeNoise>(),
        8usize,
        concat!("Alignment of ", stringify!(BiomeNoise))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BiomeNoise>())).shift as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BiomeNoise),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BiomeNoise>())).temperature as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BiomeNoise),
            "::",
            stringify!(temperature)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BiomeNoise>())).humidity as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(BiomeNoise),
            "::",
            stringify!(humidity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BiomeNoise>())).continentalness as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(BiomeNoise),
            "::",
            stringify!(continentalness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BiomeNoise>())).erosion as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(BiomeNoise),
            "::",
            stringify!(erosion)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BiomeNoise>())).weirdness as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(BiomeNoise),
            "::",
            stringify!(weirdness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BiomeNoise>())).oct as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(BiomeNoise),
            "::",
            stringify!(oct)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BiomeNoise>())).sp as *const _ as usize },
        25632usize,
        concat!(
            "Offset of field: ",
            stringify!(BiomeNoise),
            "::",
            stringify!(sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BiomeNoise>())).ss as *const _ as usize },
        25640usize,
        concat!(
            "Offset of field: ",
            stringify!(BiomeNoise),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BiomeNoise>())).previdx as *const _ as usize },
        35256usize,
        concat!(
            "Offset of field: ",
            stringify!(BiomeNoise),
            "::",
            stringify!(previdx)
        )
    );
}
extern "C" {
    pub fn initBiomes();
}
extern "C" {
    pub fn setLayerSeed(layer: *mut Layer, worldSeed: u64);
}
extern "C" {
    pub fn initSurfaceNoise(
        rnd: *mut SurfaceNoise,
        seed: *mut u64,
        xzScale: f64,
        yScale: f64,
        xzFactor: f64,
        yFactor: f64,
    );
}
extern "C" {
    pub fn initSurfaceNoiseEnd(rnd: *mut SurfaceNoise, seed: u64);
}
extern "C" {
    pub fn sampleSurfaceNoise(
        rnd: *const SurfaceNoise,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        z: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    #[doc = " Nether biomes are 3D, and generated at scale 1:4. Use voronoiAccess3D() to"]
    #[doc = " convert coordinates at 1:1 scale to their 1:4 access. Biome checks for"]
    #[doc = " structures are generally done at y=0."]
    #[doc = ""]
    #[doc = " The function getNetherBiome() determines the nether biome at a given"]
    #[doc = " coordinate at scale 1:4. The parameter 'ndel' is an output noise delta for"]
    #[doc = " optimization purposes and can be ignored (nullable)."]
    #[doc = ""]
    #[doc = " Use mapNether2D() to get a 2D area of nether biomes at y=0, scale 1:4."]
    #[doc = ""]
    #[doc = " The mapNether3D() function attempts to optimize the generation of a volume"]
    #[doc = " at scale 1:4. The output is indexed as:"]
    #[doc = " out[i_y*(r.sx*r.sz) + i_z*r.sx + i_x]."]
    #[doc = " If the optimization parameter 'confidence' has a value less than 1.0, the"]
    #[doc = " generation will generally be faster, but can yield incorrect results in some"]
    #[doc = " circumstances."]
    #[doc = ""]
    #[doc = " The output buffer for the map-functions need only be of sufficient size to"]
    #[doc = " hold the generated area (i.e. w*h or r.sx*r.sy*r.sz)."]
    pub fn setNetherSeed(nn: *mut NetherNoise, seed: u64);
}
extern "C" {
    pub fn getNetherBiome(
        nn: *const NetherNoise,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        z: ::std::os::raw::c_int,
        ndel: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapNether2D(
        nn: *const NetherNoise,
        out: *mut ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        z: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapNether3D(
        nn: *const NetherNoise,
        out: *mut ::std::os::raw::c_int,
        r: Range,
        confidence: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " The scaled Nether generation supports scales 1, 4, 16, 64, and 256."]
    #[doc = " It is similar to mapNether3D(), but applies voronoi zoom if necessary, and"]
    #[doc = " fills the output buffer with nether_wastes for versions older than 1.16."]
    pub fn genNetherScaled(
        nn: *const NetherNoise,
        out: *mut ::std::os::raw::c_int,
        r: Range,
        mc: ::std::os::raw::c_int,
        sha: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " End biome generation is based on simplex noise and varies only at a 1:16"]
    #[doc = " chunk scale which can be generated with mapEndBiome(). The function mapEnd()"]
    #[doc = " is a variation which also scales this up on a regular grid to 1:4. The final"]
    #[doc = " access at a 1:1 scale uses voronoi."]
    pub fn setEndSeed(en: *mut EndNoise, seed: u64);
}
extern "C" {
    pub fn mapEndBiome(
        en: *const EndNoise,
        out: *mut ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        z: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapEnd(
        en: *const EndNoise,
        out: *mut ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        z: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getSurfaceHeightEnd(
        mc: ::std::os::raw::c_int,
        seed: u64,
        x: ::std::os::raw::c_int,
        z: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " The scaled End generation supports scales 1, 4, 16, and 64."]
    #[doc = " The End biomes are usually 2D, but in 1.15+ there is 3D voronoi noise, which"]
    #[doc = " is controlled by the 'sha' hash of the seed. For scales higher than 1:1, and"]
    #[doc = " versions up to 1.14, 'sha' is ignored."]
    pub fn genEndScaled(
        en: *const EndNoise,
        out: *mut ::std::os::raw::c_int,
        r: Range,
        mc: ::std::os::raw::c_int,
        sha: u64,
    ) -> ::std::os::raw::c_int;
}
pub const SAMPLE_NO_SHIFT: ::std::os::raw::c_int = 1;
pub const SAMPLE_NO_DEPTH: ::std::os::raw::c_int = 2;
pub const SAMPLE_NO_BIOME: ::std::os::raw::c_int = 4;
#[doc = " In 1.18 the Overworld uses a new noise map system for the biome generation."]
#[doc = " The random number generation has also updated to a Xiroshiro128 algorithm."]
#[doc = " The scale is 1:4, and is sampled at each point individually as there is"]
#[doc = " currently not much benefit from generating a volume as a whole."]
#[doc = ""]
#[doc = " The 1.18 End generation remains similar to 1.17 and does NOT use the"]
#[doc = " biome noise."]
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
extern "C" {
    pub fn initBiomeNoise(bn: *mut BiomeNoise, mc: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setBiomeSeed(bn: *mut BiomeNoise, seed: u64, large: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sampleBiomeNoise(
        bn: *const BiomeNoise,
        np: *mut i64,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        z: ::std::os::raw::c_int,
        dat: *mut u64,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Currently, in 1.18, we have to generate biomes a chunk at a time to get an"]
    #[doc = " accurate mapping of the biomes in the level storage, as there is no longer a"]
    #[doc = " unique mapping from noise points to biomes (MC-241546). Note that the results"]
    #[doc = " from this are not suitable for chunk population/structure generation."]
    #[doc = " The output is in the form out[x][y][z] for the 64 biome points in the chunk"]
    #[doc = " section. The coordinates {cx,cy,cz} are all at scale 1:16 and the 'dat'"]
    #[doc = " argument should be the previous noise sampling and can be left NULL."]
    pub fn genBiomeNoiseChunkSection(
        bn: *const BiomeNoise,
        out: *mut [[::std::os::raw::c_int; 4usize]; 4usize],
        cx: ::std::os::raw::c_int,
        cy: ::std::os::raw::c_int,
        cz: ::std::os::raw::c_int,
        dat: *mut u64,
    );
}
extern "C" {
    #[doc = " The scaled biome noise generation applies for the Overworld version 1.18."]
    #[doc = " The 'sha' hash of the seed is only required for voronoi at scale 1:1."]
    #[doc = " A scale of zero is interpreted as the default 1:4 scale."]
    pub fn genBiomeNoiseScaled(
        bn: *const BiomeNoise,
        out: *mut ::std::os::raw::c_int,
        r: Range,
        mc: ::std::os::raw::c_int,
        sha: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn biomeExists(
        mc: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isOverworld(
        mc: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getMutated(
        mc: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getCategory(
        mc: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn areSimilar(
        mc: ::std::os::raw::c_int,
        id1: ::std::os::raw::c_int,
        id2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isMesa(id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isShallowOcean(id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isDeepOcean(id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isOceanic(id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isSnowy(id: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapContinent(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapZoomFuzzy(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapZoom(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapLand(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapLand16(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapIsland(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapSnow(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapSnow16(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapCool(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapHeat(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapSpecial(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapMushroom(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapDeepOcean(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapBiome(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapBamboo(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapNoise(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapBiomeEdge(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapHills(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapRiver(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapSmooth(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapSunflower(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapShore(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapSwampRiver(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapRiverMix(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapOceanTemp(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapOceanMix(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapVoronoi(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mapVoronoi114(
        arg1: *const Layer,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getVoronoiSHA(worldSeed: u64) -> u64;
}
extern "C" {
    pub fn voronoiAccess3D(
        sha: u64,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        z: ::std::os::raw::c_int,
        x4: *mut ::std::os::raw::c_int,
        y4: *mut ::std::os::raw::c_int,
        z4: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn getVoronoiSrcRange(r: Range) -> Range;
}
extern "C" {
    pub fn mapVoronoiPlane(
        sha: u64,
        out: *mut ::std::os::raw::c_int,
        src: *mut ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        z: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        h: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        px: ::std::os::raw::c_int,
        pz: ::std::os::raw::c_int,
        pw: ::std::os::raw::c_int,
        ph: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Generator {
    pub mc: ::std::os::raw::c_int,
    pub dim: ::std::os::raw::c_int,
    pub flags: u32,
    pub seed: u64,
    pub sha: u64,
    pub __bindgen_anon_1: Generator__bindgen_ty_1,
    pub nn: NetherNoise,
    pub en: EndNoise,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Generator__bindgen_ty_1 {
    pub __bindgen_anon_1: Generator__bindgen_ty_1__bindgen_ty_1,
    pub __bindgen_anon_2: Generator__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Generator__bindgen_ty_1__bindgen_ty_1 {
    pub ls: LayerStack,
    pub xlayer: [Layer; 5usize],
    pub entry: *mut Layer,
}
#[test]
fn bindgen_test_layout_Generator__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Generator__bindgen_ty_1__bindgen_ty_1>(),
        5208usize,
        concat!(
            "Size of: ",
            stringify!(Generator__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Generator__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Generator__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Generator__bindgen_ty_1__bindgen_ty_1>())).ls as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Generator__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(ls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Generator__bindgen_ty_1__bindgen_ty_1>())).xlayer as *const _
                as usize
        },
        4840usize,
        concat!(
            "Offset of field: ",
            stringify!(Generator__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(xlayer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Generator__bindgen_ty_1__bindgen_ty_1>())).entry as *const _
                as usize
        },
        5200usize,
        concat!(
            "Offset of field: ",
            stringify!(Generator__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Generator__bindgen_ty_1__bindgen_ty_2 {
    pub bn: BiomeNoise,
}
#[test]
fn bindgen_test_layout_Generator__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<Generator__bindgen_ty_1__bindgen_ty_2>(),
        35264usize,
        concat!(
            "Size of: ",
            stringify!(Generator__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<Generator__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(Generator__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Generator__bindgen_ty_1__bindgen_ty_2>())).bn as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Generator__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(bn)
        )
    );
}
#[test]
fn bindgen_test_layout_Generator__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Generator__bindgen_ty_1>(),
        35264usize,
        concat!("Size of: ", stringify!(Generator__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Generator__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(Generator__bindgen_ty_1))
    );
}
#[test]
fn bindgen_test_layout_Generator() {
    assert_eq!(
        ::std::mem::size_of::<Generator>(),
        40344usize,
        concat!("Size of: ", stringify!(Generator))
    );
    assert_eq!(
        ::std::mem::align_of::<Generator>(),
        8usize,
        concat!("Alignment of ", stringify!(Generator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Generator>())).mc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Generator),
            "::",
            stringify!(mc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Generator>())).dim as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Generator),
            "::",
            stringify!(dim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Generator>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Generator),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Generator>())).seed as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Generator),
            "::",
            stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Generator>())).sha as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Generator),
            "::",
            stringify!(sha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Generator>())).nn as *const _ as usize },
        35296usize,
        concat!(
            "Offset of field: ",
            stringify!(Generator),
            "::",
            stringify!(nn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Generator>())).en as *const _ as usize },
        39792usize,
        concat!(
            "Offset of field: ",
            stringify!(Generator),
            "::",
            stringify!(en)
        )
    );
}
extern "C" {
    #[doc = " Sets up a biome generator for a given MC version. The 'flags' can be used to"]
    #[doc = " control LARGE_BIOMES or to FORCE_OCEAN_VARIANTS to enable ocean variants at"]
    #[doc = " scales higher than normal."]
    pub fn setupGenerator(g: *mut Generator, mc: ::std::os::raw::c_int, flags: u32);
}
extern "C" {
    #[doc = " Initializes the generator for a given dimension and seed."]
    #[doc = " dim=0:   Overworld"]
    #[doc = " dim=-1:  Nether"]
    #[doc = " dim=+1:  End"]
    pub fn applySeed(g: *mut Generator, dim: ::std::os::raw::c_int, seed: u64);
}
extern "C" {
    #[doc = " Calculates the buffer size (number of ints) required to generate a cuboidal"]
    #[doc = " volume of size (sx, sy, sz). If 'sy' is zero the buffer is calculated for a"]
    #[doc = " 2D plane (which is equivalent to sy=1 here)."]
    #[doc = " The function allocCache() can be used to allocate the corresponding int"]
    #[doc = " buffer using malloc()."]
    pub fn getMinCacheSize(
        g: *const Generator,
        scale: ::std::os::raw::c_int,
        sx: ::std::os::raw::c_int,
        sy: ::std::os::raw::c_int,
        sz: ::std::os::raw::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn allocCache(g: *const Generator, r: Range) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Generates the biomes for a cuboidal scaled range given by 'r'."]
    #[doc = " (See description of Range for more detail.)"]
    #[doc = ""]
    #[doc = " The output is generated inside the cache. Upon success the biome ids can be"]
    #[doc = " accessed by indexing as:"]
    #[doc = "  cache[ y*r.sx*r.sz + z*r.sx + x ]"]
    #[doc = " where (x,y,z) is an relative position inside the range cuboid."]
    #[doc = ""]
    #[doc = " The required length of the cache can be determined with getMinCacheSize()."]
    #[doc = ""]
    #[doc = " The return value is zero upon success."]
    pub fn genBiomes(
        g: *const Generator,
        cache: *mut ::std::os::raw::c_int,
        r: Range,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Gets the biome for a specified scaled position. Note that the scale should"]
    #[doc = " be either 1 or 4, for block or biome coordinates respectively."]
    #[doc = " Returns none (-1) upon failure."]
    pub fn getBiomeAt(
        g: *const Generator,
        scale: ::std::os::raw::c_int,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        z: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Returns the default layer that corresponds to the given scale."]
    #[doc = " Supported scales are {0, 1, 4, 16, 64, 256}. A scale of zero indicates the"]
    #[doc = " custom entry layer 'g->entry'."]
    #[doc = " (Overworld, MC <= 1.17)"]
    pub fn getLayerForScale(g: *const Generator, scale: ::std::os::raw::c_int) -> *const Layer;
}
extern "C" {
    #[doc = "============================================================================="]
    #[doc = " Layered Biome Generation (old interface up to 1.17)"]
    #[doc = "============================================================================="]
    pub fn setupLayerStack(
        g: *mut LayerStack,
        mc: ::std::os::raw::c_int,
        largeBiomes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn getMinLayerCacheSize(
        layer: *const Layer,
        sizeX: ::std::os::raw::c_int,
        sizeZ: ::std::os::raw::c_int,
    ) -> size_t;
}
extern "C" {
    pub fn setupLayer(
        l: *mut Layer,
        map: mapfunc_t,
        mc: ::std::os::raw::c_int,
        zoom: i8,
        edge: i8,
        saltbase: u64,
        p: *mut Layer,
        p2: *mut Layer,
    ) -> *mut Layer;
}
extern "C" {
    pub fn genArea(
        layer: *const Layer,
        out: *mut ::std::os::raw::c_int,
        areaX: ::std::os::raw::c_int,
        areaZ: ::std::os::raw::c_int,
        areaWidth: ::std::os::raw::c_int,
        areaHeight: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
